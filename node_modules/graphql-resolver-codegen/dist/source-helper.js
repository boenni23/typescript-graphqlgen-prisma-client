"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
exports.GraphQLScalarTypeArray = [
    "Boolean",
    "Int",
    "Float",
    "String",
    "ID",
    "DateTime"
];
function extractTypeLike(node) {
    var typeLike = {};
    graphql_1.visit(node.type, {
        NonNullType: function () {
            typeLike.isRequired = true;
        },
        ListType: function () {
            typeLike.isArray = true;
        },
        NamedType: function (namedTypeNode) {
            typeLike.name = namedTypeNode.name.value;
        }
    });
    return typeLike;
}
function extractTypeFields(node) {
    var fields = [];
    graphql_1.visit(node, {
        FieldDefinition: function (fieldNode) {
            var fieldType = extractTypeLike(fieldNode);
            var fieldArguments = [];
            graphql_1.visit(fieldNode, {
                InputValueDefinition: function (inputValueDefinitionNode) {
                    var argumentType = extractTypeLike(inputValueDefinitionNode);
                    fieldArguments.push({
                        name: inputValueDefinitionNode.name.value,
                        type: argumentType
                    });
                }
            });
            fields.push({
                name: fieldNode.name.value,
                type: fieldType,
                arguments: fieldArguments
            });
        }
    });
    return fields;
}
function extractGraphQLTypes(schema) {
    var types = [];
    graphql_1.visit(schema, {
        ObjectTypeDefinition: function (node) {
            var fields = extractTypeFields(node);
            types.push({
                name: node.name.value,
                fields: fields
            });
        }
    });
    return types;
}
exports.extractGraphQLTypes = extractGraphQLTypes;
function extractEnumValues(node) {
    var values = [];
    graphql_1.visit(node, {
        EnumValueDefinition: function (node) {
            values.push(node.name.value);
        }
    });
    return values;
}
function extractGraphQLEnums(schema) {
    var types = [];
    graphql_1.visit(schema, {
        EnumTypeDefinition: function (node) {
            var values = extractEnumValues(node);
            types.push({
                name: node.name.value,
                values: values
            });
        }
    });
    return types;
}
exports.extractGraphQLEnums = extractGraphQLEnums;
function extractUnionTypes(node, types) {
    var unionTypesStrings = [];
    graphql_1.visit(node, {
        NamedType: function (node) {
            unionTypesStrings.push(node.name.value);
        }
    });
    return types.filter(function (type) { return unionTypesStrings.indexOf(type.name) > -1; });
}
function extractGraphQLUnions(schema) {
    var types = [];
    graphql_1.visit(schema, {
        UnionTypeDefinition: function (node) {
            var allTypes = extractGraphQLTypes(schema);
            var unionTypes = extractUnionTypes(node, allTypes);
            types.push({
                name: node.name.value,
                types: unionTypes
            });
        }
    });
    return types;
}
exports.extractGraphQLUnions = extractGraphQLUnions;
//# sourceMappingURL=source-helper.js.map